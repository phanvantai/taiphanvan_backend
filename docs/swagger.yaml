basePath: /api
definitions:
  models.Comment:
    description: A comment made by a user on a specific post
    properties:
      content:
        example: Great post!
        type: string
      created_at:
        example: "2023-01-01T12:00:00Z"
        type: string
      id:
        example: 1
        type: integer
      post:
        $ref: '#/definitions/models.Post'
      post_id:
        example: 1
        type: integer
      updated_at:
        example: "2023-01-02T12:00:00Z"
        type: string
      user:
        $ref: '#/definitions/models.User'
      user_id:
        example: 1
        type: integer
    type: object
  models.CreateCommentRequest:
    description: Request model for creating a new comment on a post
    properties:
      content:
        example: This is a great post!
        type: string
    required:
    - content
    type: object
  models.CreatePostRequest:
    description: Request model for creating a new blog post
    properties:
      content:
        example: This is the content of my new post
        type: string
      cover:
        example: https://example.com/image.jpg
        type: string
      excerpt:
        example: A short excerpt
        type: string
      publish_at:
        example: "2023-01-03T12:00:00Z"
        type: string
      status:
        allOf:
        - $ref: '#/definitions/models.PostStatus'
        example: published
      tags:
        example:
        - '["technology"'
        - '"programming"]'
        items:
          type: string
        type: array
      title:
        example: My New Post
        type: string
    required:
    - content
    - title
    type: object
  models.LoginRequest:
    properties:
      email:
        type: string
      password:
        minLength: 6
        type: string
    required:
    - email
    - password
    type: object
  models.Post:
    description: A blog post with content, metadata, and relationships
    properties:
      content:
        example: This is the content of my blog post...
        type: string
      cover:
        example: https://res.cloudinary.com/demo/image/upload/v1234567890/folder/post_1_1620000000.jpg
        type: string
      created_at:
        example: "2023-01-01T12:00:00Z"
        type: string
      excerpt:
        example: A short summary of the post
        type: string
      id:
        example: 1
        type: integer
      slug:
        example: my-first-blog-post
        type: string
      status:
        allOf:
        - $ref: '#/definitions/models.PostStatus'
        example: published
      tags:
        items:
          $ref: '#/definitions/models.Tag'
        type: array
      title:
        example: My First Blog Post
        type: string
      updated_at:
        example: "2023-01-02T12:00:00Z"
        type: string
      user:
        $ref: '#/definitions/models.User'
      user_id:
        example: 1
        type: integer
    type: object
  models.PostStatus:
    enum:
    - draft
    - published
    - archived
    - scheduled
    type: string
    x-enum-varnames:
    - PostStatusDraft
    - PostStatusPublished
    - PostStatusArchived
    - PostStatusScheduled
  models.RefreshTokenRequest:
    properties:
      refresh_token:
        type: string
    required:
    - refresh_token
    type: object
  models.RegisterRequest:
    properties:
      email:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      password:
        minLength: 8
        type: string
      username:
        maxLength: 30
        minLength: 3
        type: string
    required:
    - email
    - password
    - username
    type: object
  models.SetPostStatusRequest:
    description: Request model for changing a post's status
    properties:
      publish_at:
        example: "2023-01-03T12:00:00Z"
        type: string
      status:
        allOf:
        - $ref: '#/definitions/models.PostStatus'
        example: published
    required:
    - status
    type: object
  models.SwaggerAvatarResponse:
    description: Response model for avatar upload
    properties:
      profile_image:
        example: https://example.com/avatar.jpg
        type: string
    type: object
  models.SwaggerPostCoverResponse:
    description: Response model for post cover upload
    properties:
      cover:
        example: https://example.com/cover.jpg
        type: string
    type: object
  models.SwaggerPostsResponse:
    description: Response model for listing blog posts
    properties:
      meta:
        properties:
          last_page:
            example: 5
            type: integer
          limit:
            example: 10
            type: integer
          page:
            example: 1
            type: integer
          total:
            example: 50
            type: integer
        type: object
      posts:
        items:
          $ref: '#/definitions/models.Post'
        type: array
    type: object
  models.SwaggerProfileResponse:
    description: Response model for user profile information
    properties:
      bio:
        example: Software developer
        type: string
      created_at:
        example: "2023-01-01T00:00:00Z"
        type: string
      email:
        example: john@example.com
        type: string
      first_name:
        example: John
        type: string
      id:
        example: 1
        type: integer
      last_name:
        example: Doe
        type: string
      profile_image:
        example: https://example.com/avatar.jpg
        type: string
      role:
        example: user
        type: string
      username:
        example: johndoe
        type: string
    type: object
  models.SwaggerStandardResponse:
    description: A standard API response format
    properties:
      data: {}
      error:
        example: Invalid input
        type: string
      message:
        example: Operation completed successfully
        type: string
      status:
        example: success
        type: string
    type: object
  models.SwaggerUpdateProfileRequest:
    description: Request model for updating user profile
    properties:
      bio:
        example: Software developer
        type: string
      first_name:
        example: John
        type: string
      last_name:
        example: Doe
        type: string
    type: object
  models.Tag:
    description: A tag that can be associated with multiple posts
    properties:
      id:
        example: 1
        type: integer
      name:
        example: technology
        type: string
      posts:
        items:
          $ref: '#/definitions/models.Post'
        type: array
    type: object
  models.TagWithCount:
    description: A tag with the count of posts using it
    properties:
      id:
        example: 1
        type: integer
      name:
        example: technology
        type: string
      post_count:
        example: 5
        type: integer
    type: object
  models.TokenResponse:
    properties:
      access_token:
        type: string
      expires_in:
        description: in seconds
        type: integer
      refresh_token:
        type: string
      token_type:
        type: string
    type: object
  models.TokenRevokeRequest:
    properties:
      refresh_token:
        type: string
    required:
    - refresh_token
    type: object
  models.UpdateCommentRequest:
    description: Request model for updating an existing comment
    properties:
      content:
        example: This is my updated comment
        type: string
    required:
    - content
    type: object
  models.UpdatePostRequest:
    description: Request model for updating an existing blog post
    properties:
      content:
        example: Updated content
        type: string
      cover:
        example: https://example.com/updated-cover.jpg
        type: string
      excerpt:
        example: Updated excerpt
        type: string
      publish_at:
        example: "2023-01-03T12:00:00Z"
        type: string
      status:
        allOf:
        - $ref: '#/definitions/models.PostStatus'
        example: published
      tags:
        example:
        - '["technology"'
        - '"programming"'
        - '"updated"]'
        items:
          type: string
        type: array
      title:
        example: Updated Post Title
        type: string
    type: object
  models.User:
    description: A user account with profile information and relationships
    properties:
      bio:
        example: I'm a software developer interested in web technologies.
        type: string
      comments:
        items:
          $ref: '#/definitions/models.Comment'
        type: array
      created_at:
        example: "2023-01-01T12:00:00Z"
        type: string
      email:
        example: john@example.com
        type: string
      first_name:
        example: John
        type: string
      id:
        example: 1
        type: integer
      last_name:
        example: Doe
        type: string
      posts:
        items:
          $ref: '#/definitions/models.Post'
        type: array
      profile_image:
        example: https://res.cloudinary.com/demo/image/upload/v1234567890/avatars/user_1_1620000000.jpg
        type: string
      role:
        example: user
        type: string
      updated_at:
        example: "2023-01-02T12:00:00Z"
        type: string
      username:
        example: johndoe
        type: string
    type: object
host: localhost:9876
info:
  contact:
    email: support@example.com
    name: API Support
    url: https://github.com/phanvantai/taiphanvan_backend
  description: A RESTful API for the TaiPhanVan personal blog platform
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  termsOfService: http://swagger.io/terms/
  title: TaiPhanVan Blog API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate a user and return JWT tokens
      parameters:
      - description: Login Credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/models.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Login successful
          schema:
            $ref: '#/definitions/models.TokenResponse'
        "400":
          description: Invalid input
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Authentication failed
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Server error
          schema:
            additionalProperties: true
            type: object
      summary: Login to the application
      tags:
      - Auth
  /auth/logout:
    post:
      consumes:
      - application/json
      description: Invalidate the current user's tokens
      parameters:
      - description: Logout options
        in: body
        name: body
        schema:
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: Successfully logged out
          schema:
            $ref: '#/definitions/models.SwaggerStandardResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.SwaggerStandardResponse'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/models.SwaggerStandardResponse'
      security:
      - BearerAuth: []
      summary: Logout from the application
      tags:
      - Auth
  /auth/refresh:
    post:
      consumes:
      - application/json
      description: Get a new access token using a refresh token
      parameters:
      - description: Refresh Token
        in: body
        name: refresh_token
        required: true
        schema:
          $ref: '#/definitions/models.RefreshTokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Token refreshed successfully
          schema:
            $ref: '#/definitions/models.TokenResponse'
        "400":
          description: Invalid input
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Invalid refresh token
          schema:
            additionalProperties: true
            type: object
      summary: Refresh an access token
      tags:
      - Auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Create a new user account
      parameters:
      - description: User Registration Data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: User registered successfully
          schema:
            $ref: '#/definitions/models.SwaggerStandardResponse'
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/models.SwaggerStandardResponse'
        "409":
          description: Email or username already exists
          schema:
            $ref: '#/definitions/models.SwaggerStandardResponse'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/models.SwaggerStandardResponse'
      summary: Register a new user
      tags:
      - Auth
  /auth/revoke:
    post:
      consumes:
      - application/json
      description: Invalidate a refresh token
      parameters:
      - description: Refresh Token
        in: body
        name: refresh_token
        required: true
        schema:
          $ref: '#/definitions/models.TokenRevokeRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Token revoked successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid input or token revocation failed
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Revoke a refresh token
      tags:
      - Auth
  /comments/{commentID}:
    delete:
      description: Removes a comment from a post
      parameters:
      - description: Comment ID
        in: path
        name: commentID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Success message
          schema:
            $ref: '#/definitions/models.SwaggerStandardResponse'
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/models.SwaggerStandardResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.SwaggerStandardResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.SwaggerStandardResponse'
        "404":
          description: Comment not found
          schema:
            $ref: '#/definitions/models.SwaggerStandardResponse'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/models.SwaggerStandardResponse'
      security:
      - BearerAuth: []
      summary: Delete a comment
      tags:
      - Comments
    put:
      consumes:
      - application/json
      description: Updates an existing comment
      parameters:
      - description: Comment ID
        in: path
        name: commentID
        required: true
        type: integer
      - description: Updated comment content
        in: body
        name: comment
        required: true
        schema:
          $ref: '#/definitions/models.UpdateCommentRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Updated comment
          schema:
            $ref: '#/definitions/models.Comment'
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/models.SwaggerStandardResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.SwaggerStandardResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.SwaggerStandardResponse'
        "404":
          description: Comment not found
          schema:
            $ref: '#/definitions/models.SwaggerStandardResponse'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/models.SwaggerStandardResponse'
      security:
      - BearerAuth: []
      summary: Update a comment
      tags:
      - Comments
  /health:
    get:
      description: Provides a simple endpoint to verify the API and database are running
      produces:
      - application/json
      responses:
        "200":
          description: API is healthy
          schema:
            $ref: '#/definitions/models.SwaggerStandardResponse'
        "503":
          description: Database connection issues
          schema:
            $ref: '#/definitions/models.SwaggerStandardResponse'
      summary: Check API health
      tags:
      - System
  /posts:
    get:
      description: Returns a paginated list of blog posts with optional tag and status
        filtering
      parameters:
      - description: 'Page number (default: 1)'
        in: query
        name: page
        type: integer
      - description: 'Number of items per page (default: 10)'
        in: query
        name: limit
        type: integer
      - description: Filter posts by tag name
        in: query
        name: tag
        type: string
      - description: Filter posts by status (draft, published, archived, scheduled)
        in: query
        name: status
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of posts with pagination metadata
          schema:
            $ref: '#/definitions/models.SwaggerPostsResponse'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/models.SwaggerStandardResponse'
      summary: Get list of blog posts
      tags:
      - Posts
    post:
      consumes:
      - application/json
      description: Creates a new blog post with the provided details
      parameters:
      - description: Post details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.CreatePostRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created post
          schema:
            $ref: '#/definitions/models.Post'
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/models.SwaggerStandardResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.SwaggerStandardResponse'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/models.SwaggerStandardResponse'
      security:
      - BearerAuth: []
      summary: Create a new blog post
      tags:
      - Posts
  /posts/{id}:
    delete:
      description: Deletes a blog post by ID (soft delete)
      parameters:
      - description: Post ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Success message
          schema:
            $ref: '#/definitions/models.SwaggerStandardResponse'
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/models.SwaggerStandardResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.SwaggerStandardResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.SwaggerStandardResponse'
        "404":
          description: Post not found
          schema:
            $ref: '#/definitions/models.SwaggerStandardResponse'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/models.SwaggerStandardResponse'
      security:
      - BearerAuth: []
      summary: Delete a blog post
      tags:
      - Posts
    put:
      consumes:
      - application/json
      description: Updates a blog post with the provided details
      parameters:
      - description: Post ID
        in: path
        name: id
        required: true
        type: integer
      - description: Post details
        in: body
        name: post
        required: true
        schema:
          $ref: '#/definitions/models.UpdatePostRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Updated post
          schema:
            $ref: '#/definitions/models.Post'
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/models.SwaggerStandardResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.SwaggerStandardResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.SwaggerStandardResponse'
        "404":
          description: Post not found
          schema:
            $ref: '#/definitions/models.SwaggerStandardResponse'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/models.SwaggerStandardResponse'
      security:
      - BearerAuth: []
      summary: Update an existing blog post
      tags:
      - Posts
  /posts/{id}/comments:
    post:
      consumes:
      - application/json
      description: Adds a new comment to a post
      parameters:
      - description: Post ID
        in: path
        name: id
        required: true
        type: integer
      - description: Comment content
        in: body
        name: comment
        required: true
        schema:
          $ref: '#/definitions/models.CreateCommentRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created comment
          schema:
            $ref: '#/definitions/models.Comment'
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/models.SwaggerStandardResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.SwaggerStandardResponse'
        "404":
          description: Post not found
          schema:
            $ref: '#/definitions/models.SwaggerStandardResponse'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/models.SwaggerStandardResponse'
      security:
      - BearerAuth: []
      summary: Create a new comment
      tags:
      - Comments
  /posts/{id}/cover:
    delete:
      description: Remove the cover image from a post
      parameters:
      - description: Post ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Cover deleted successfully
          schema:
            $ref: '#/definitions/models.SwaggerStandardResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.SwaggerStandardResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.SwaggerStandardResponse'
        "404":
          description: Post not found
          schema:
            $ref: '#/definitions/models.SwaggerStandardResponse'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/models.SwaggerStandardResponse'
      security:
      - BearerAuth: []
      summary: Delete post cover image
      tags:
      - Posts
    post:
      consumes:
      - multipart/form-data
      description: Upload a new cover image for a post
      parameters:
      - description: Post ID
        in: path
        name: id
        required: true
        type: integer
      - description: Cover image file (JPG, JPEG, PNG, WEBP, max 5MB)
        in: formData
        name: cover
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: Cover uploaded successfully
          schema:
            $ref: '#/definitions/models.SwaggerPostCoverResponse'
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/models.SwaggerStandardResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.SwaggerStandardResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.SwaggerStandardResponse'
        "404":
          description: Post not found
          schema:
            $ref: '#/definitions/models.SwaggerStandardResponse'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/models.SwaggerStandardResponse'
      security:
      - BearerAuth: []
      summary: Upload post cover image
      tags:
      - Posts
  /posts/{id}/publish:
    post:
      description: Sets a blog post's status to published
      parameters:
      - description: Post ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Published post
          schema:
            $ref: '#/definitions/models.Post'
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/models.SwaggerStandardResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.SwaggerStandardResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.SwaggerStandardResponse'
        "404":
          description: Post not found
          schema:
            $ref: '#/definitions/models.SwaggerStandardResponse'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/models.SwaggerStandardResponse'
      security:
      - BearerAuth: []
      summary: Publish a blog post
      tags:
      - Posts
  /posts/{id}/status:
    post:
      consumes:
      - application/json
      description: Updates a post's status to the specified value (draft, published,
        archived, scheduled)
      parameters:
      - description: Post ID
        in: path
        name: id
        required: true
        type: integer
      - description: Status details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.SetPostStatusRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Updated post
          schema:
            $ref: '#/definitions/models.Post'
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/models.SwaggerStandardResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.SwaggerStandardResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.SwaggerStandardResponse'
        "404":
          description: Post not found
          schema:
            $ref: '#/definitions/models.SwaggerStandardResponse'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/models.SwaggerStandardResponse'
      security:
      - BearerAuth: []
      summary: Set the status of a blog post
      tags:
      - Posts
  /posts/{id}/unpublish:
    post:
      description: Sets a blog post's status to unpublished (draft)
      parameters:
      - description: Post ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Unpublished post
          schema:
            $ref: '#/definitions/models.Post'
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/models.SwaggerStandardResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.SwaggerStandardResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.SwaggerStandardResponse'
        "404":
          description: Post not found
          schema:
            $ref: '#/definitions/models.SwaggerStandardResponse'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/models.SwaggerStandardResponse'
      security:
      - BearerAuth: []
      summary: Unpublish a blog post
      tags:
      - Posts
  /posts/{postID}/comments:
    get:
      description: Returns all comments for a specific post
      parameters:
      - description: Post ID
        in: path
        name: postID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of comments
          schema:
            items:
              $ref: '#/definitions/models.Comment'
            type: array
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/models.SwaggerStandardResponse'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/models.SwaggerStandardResponse'
      summary: Get comments for a post
      tags:
      - Comments
  /posts/slug/{slug}:
    get:
      description: Returns a single blog post by its slug
      parameters:
      - description: Post slug
        in: path
        name: slug
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Post details
          schema:
            $ref: '#/definitions/models.Post'
        "404":
          description: Post not found
          schema:
            $ref: '#/definitions/models.SwaggerStandardResponse'
      summary: Get a blog post by slug
      tags:
      - Posts
  /profile:
    get:
      description: Retrieve the current user's profile information
      produces:
      - application/json
      responses:
        "200":
          description: User profile
          schema:
            $ref: '#/definitions/models.SwaggerProfileResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/models.SwaggerStandardResponse'
      security:
      - BearerAuth: []
      summary: Get user profile
      tags:
      - Users
    put:
      consumes:
      - application/json
      description: Update the current user's profile information
      parameters:
      - description: Profile Data
        in: body
        name: profile
        required: true
        schema:
          $ref: '#/definitions/models.SwaggerUpdateProfileRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Profile updated successfully
          schema:
            $ref: '#/definitions/models.SwaggerProfileResponse'
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/models.SwaggerStandardResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/models.SwaggerStandardResponse'
      security:
      - BearerAuth: []
      summary: Update user profile
      tags:
      - Users
  /profile/avatar:
    post:
      consumes:
      - multipart/form-data
      description: Upload a new avatar image for the current user
      parameters:
      - description: Avatar image file (JPG, JPEG, PNG, max 2MB)
        in: formData
        name: avatar
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: Avatar uploaded successfully
          schema:
            $ref: '#/definitions/models.SwaggerAvatarResponse'
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/models.SwaggerStandardResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.SwaggerStandardResponse'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/models.SwaggerStandardResponse'
      security:
      - BearerAuth: []
      summary: Upload user avatar
      tags:
      - Users
  /tags:
    get:
      description: Returns all tags with their post counts
      produces:
      - application/json
      responses:
        "200":
          description: List of tags with post counts
          schema:
            items:
              $ref: '#/definitions/models.TagWithCount'
            type: array
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/models.SwaggerStandardResponse'
      summary: Get all tags
      tags:
      - Tags
  /tags/popular:
    get:
      description: Returns the most used tags with post counts (limited to 10)
      produces:
      - application/json
      responses:
        "200":
          description: List of popular tags with post counts
          schema:
            items:
              $ref: '#/definitions/models.TagWithCount'
            type: array
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/models.SwaggerStandardResponse'
      summary: Get popular tags
      tags:
      - Tags
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and the JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
